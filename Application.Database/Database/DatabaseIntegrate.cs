// Do not modify this file. It's generated by Framework.Cli generate command.

namespace DatabaseIntegrate.Demo
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.Linq;
    using System.Threading.Tasks;
    using Framework.DataAccessLayer;
    using Database.Demo;

    public static class LanguageIntegrateApp
    {
        public enum IdEnum { [IdEnum(null)]None = 0, [IdEnum("English")]English = -1, [IdEnum("French")]French = -2, [IdEnum("German")]German = -3, [IdEnum("Italian")]Italian = -4 }

        public static LanguageIntegrate Row(this IdEnum value)
        {
            return RowList.Where(item => item.IdName == IdEnumAttribute.IdNameFromEnum(value)).SingleOrDefault();
        }

        public static IdEnum IdName(string value)
        {
            return IdEnumAttribute.IdNameToEnum<IdEnum>(value);
        }

        public static string IdName(this IdEnum value)
        {
            return IdEnumAttribute.IdNameFromEnum(value);
        }

        public static async Task<int> Id(this IdEnum value)
        {
            return (await Data.Query<LanguageIntegrate>().Where(item => item.IdName == IdEnumAttribute.IdNameFromEnum(value)).QueryExecuteAsync()).Single().Id;
        }

        public static List<LanguageIntegrate> RowList
        {
            get
            {
                var result = new List<LanguageIntegrate>
                {
                    new LanguageIntegrate { Id = 0, IdName = "English", Name = "English", TextHtml = "<span class=\"flag-icon flag-icon-gb\"></span> English" },
                    new LanguageIntegrate { Id = 0, IdName = "French", Name = "French", TextHtml = "<span class=\"flag-icon flag-icon-fr\"></span> French" },
                    new LanguageIntegrate { Id = 0, IdName = "German", Name = "German", TextHtml = "<span class=\"flag-icon flag-icon-de\"></span> German" },
                    new LanguageIntegrate { Id = 0, IdName = "Italian", Name = "Italian", TextHtml = "<span class=\"flag-icon flag-icon-it\"></span> Italian" },
                };
                return result;
            }
        }
    }

    public static class LoginPermissionIntegrateApp
    {
        public enum IdEnum { [IdEnum(null)]None = 0, [IdEnum("Administrator")]Administrator = -1, [IdEnum("Developer")]Developer = -2, [IdEnum("Guest")]Guest = -3 }

        public static LoginPermissionIntegrate Row(this IdEnum value)
        {
            return RowList.Where(item => item.IdName == IdEnumAttribute.IdNameFromEnum(value)).SingleOrDefault();
        }

        public static IdEnum IdName(string value)
        {
            return IdEnumAttribute.IdNameToEnum<IdEnum>(value);
        }

        public static string IdName(this IdEnum value)
        {
            return IdEnumAttribute.IdNameFromEnum(value);
        }

        public static async Task<int> Id(this IdEnum value)
        {
            return (await Data.Query<LoginPermissionIntegrate>().Where(item => item.IdName == IdEnumAttribute.IdNameFromEnum(value)).QueryExecuteAsync()).Single().Id;
        }

        public static List<LoginPermissionIntegrate> RowList
        {
            get
            {
                var result = new List<LoginPermissionIntegrate>
                {
                    new LoginPermissionIntegrate { Id = 0, IdName = "Administrator", Name = "Administrator", Description = "Administrator permission", IsIntegrate = true, IsDelete = false },
                    new LoginPermissionIntegrate { Id = 0, IdName = "Developer", Name = "Developer", Description = "Developer permission", IsIntegrate = true, IsDelete = false },
                    new LoginPermissionIntegrate { Id = 0, IdName = "Guest", Name = "Guest", Description = "Guest permission", IsIntegrate = true, IsDelete = false },
                };
                return result;
            }
        }
    }

    public static class RoadmapCategoryIntegrateApp
    {
        public enum IdEnum { [IdEnum(null)]None = 0, [IdEnum("Analyze")]Analyze = -1, [IdEnum("Bug")]Bug = -2, [IdEnum("Feature")]Feature = -3 }

        public static RoadmapCategoryIntegrate Row(this IdEnum value)
        {
            return RowList.Where(item => item.IdName == IdEnumAttribute.IdNameFromEnum(value)).SingleOrDefault();
        }

        public static IdEnum IdName(string value)
        {
            return IdEnumAttribute.IdNameToEnum<IdEnum>(value);
        }

        public static string IdName(this IdEnum value)
        {
            return IdEnumAttribute.IdNameFromEnum(value);
        }

        public static async Task<int> Id(this IdEnum value)
        {
            return (await Data.Query<RoadmapCategoryIntegrate>().Where(item => item.IdName == IdEnumAttribute.IdNameFromEnum(value)).QueryExecuteAsync()).Single().Id;
        }

        public static List<RoadmapCategoryIntegrate> RowList
        {
            get
            {
                var result = new List<RoadmapCategoryIntegrate>
                {
                    new RoadmapCategoryIntegrate { Id = 0, IdName = "Analyze", Name = "Analyze", Text = "Analyze", Description = "Analyze", IsIntegrate = true, IsDelete = false },
                    new RoadmapCategoryIntegrate { Id = 0, IdName = "Bug", Name = "Bug", Text = "Bug", Description = "Software Bug", IsIntegrate = true, IsDelete = false },
                    new RoadmapCategoryIntegrate { Id = 0, IdName = "Feature", Name = "Feature", Text = "Feature", Description = "Software Feature", IsIntegrate = true, IsDelete = false },
                };
                return result;
            }
        }
    }

    public static class RoadmapModuleIntegrateApp
    {
        public enum IdEnum { [IdEnum(null)]None = 0, [IdEnum("Application")]Application = -1, [IdEnum("ApplicationCms")]ApplicationCms = -2, [IdEnum("ApplicationLogin")]ApplicationLogin = -3, [IdEnum("ApplicationRoadmap")]ApplicationRoadmap = -4, [IdEnum("Framework")]Framework = -5 }

        public static RoadmapModuleIntegrate Row(this IdEnum value)
        {
            return RowList.Where(item => item.IdName == IdEnumAttribute.IdNameFromEnum(value)).SingleOrDefault();
        }

        public static IdEnum IdName(string value)
        {
            return IdEnumAttribute.IdNameToEnum<IdEnum>(value);
        }

        public static string IdName(this IdEnum value)
        {
            return IdEnumAttribute.IdNameFromEnum(value);
        }

        public static async Task<int> Id(this IdEnum value)
        {
            return (await Data.Query<RoadmapModuleIntegrate>().Where(item => item.IdName == IdEnumAttribute.IdNameFromEnum(value)).QueryExecuteAsync()).Single().Id;
        }

        public static List<RoadmapModuleIntegrate> RowList
        {
            get
            {
                var result = new List<RoadmapModuleIntegrate>
                {
                    new RoadmapModuleIntegrate { Id = 0, IdName = "Application", Name = "Application", Text = "Application", Description = null, IsIntegrate = true, IsDelete = false },
                    new RoadmapModuleIntegrate { Id = 0, IdName = "ApplicationCms", Name = "ApplicationCms", Text = "Application / Cms", Description = null, IsIntegrate = true, IsDelete = false },
                    new RoadmapModuleIntegrate { Id = 0, IdName = "ApplicationLogin", Name = "ApplicationLogin", Text = "Application / Login", Description = null, IsIntegrate = true, IsDelete = false },
                    new RoadmapModuleIntegrate { Id = 0, IdName = "ApplicationRoadmap", Name = "ApplicationRoadmap", Text = "Application / Roadmap", Description = null, IsIntegrate = true, IsDelete = false },
                    new RoadmapModuleIntegrate { Id = 0, IdName = "Framework", Name = "Framework", Text = "Framework", Description = null, IsIntegrate = true, IsDelete = false },
                };
                return result;
            }
        }
    }

    public static class RoadmapPriorityIntegrateApp
    {
        public enum IdEnum { [IdEnum(null)]None = 0, [IdEnum("Critical")]Critical = -1, [IdEnum("High")]High = -2, [IdEnum("Low")]Low = -3, [IdEnum("Medium")]Medium = -4 }

        public static RoadmapPriorityIntegrate Row(this IdEnum value)
        {
            return RowList.Where(item => item.IdName == IdEnumAttribute.IdNameFromEnum(value)).SingleOrDefault();
        }

        public static IdEnum IdName(string value)
        {
            return IdEnumAttribute.IdNameToEnum<IdEnum>(value);
        }

        public static string IdName(this IdEnum value)
        {
            return IdEnumAttribute.IdNameFromEnum(value);
        }

        public static async Task<int> Id(this IdEnum value)
        {
            return (await Data.Query<RoadmapPriorityIntegrate>().Where(item => item.IdName == IdEnumAttribute.IdNameFromEnum(value)).QueryExecuteAsync()).Single().Id;
        }

        public static List<RoadmapPriorityIntegrate> RowList
        {
            get
            {
                var result = new List<RoadmapPriorityIntegrate>
                {
                    new RoadmapPriorityIntegrate { Id = 0, IdName = "Critical", Name = "Critical", Text = "Critical (Red)", Description = null, IsIntegrate = true, IsDelete = false },
                    new RoadmapPriorityIntegrate { Id = 0, IdName = "High", Name = "High", Text = "High (Orange)", Description = null, IsIntegrate = true, IsDelete = false },
                    new RoadmapPriorityIntegrate { Id = 0, IdName = "Low", Name = "Low", Text = "Low (Green)", Description = null, IsIntegrate = true, IsDelete = false },
                    new RoadmapPriorityIntegrate { Id = 0, IdName = "Medium", Name = "Medium", Text = "Medium (Blue)", Description = null, IsIntegrate = true, IsDelete = false },
                };
                return result;
            }
        }
    }

    public static class RoadmapStateIntegrateApp
    {
        public enum IdEnum { [IdEnum(null)]None = 0, [IdEnum("Done")]Done = -1, [IdEnum("In Progress")]InProgress = -2, [IdEnum("New")]New = -3, [IdEnum("Open")]Open = -4 }

        public static RoadmapStateIntegrate Row(this IdEnum value)
        {
            return RowList.Where(item => item.IdName == IdEnumAttribute.IdNameFromEnum(value)).SingleOrDefault();
        }

        public static IdEnum IdName(string value)
        {
            return IdEnumAttribute.IdNameToEnum<IdEnum>(value);
        }

        public static string IdName(this IdEnum value)
        {
            return IdEnumAttribute.IdNameFromEnum(value);
        }

        public static async Task<int> Id(this IdEnum value)
        {
            return (await Data.Query<RoadmapStateIntegrate>().Where(item => item.IdName == IdEnumAttribute.IdNameFromEnum(value)).QueryExecuteAsync()).Single().Id;
        }

        public static List<RoadmapStateIntegrate> RowList
        {
            get
            {
                var result = new List<RoadmapStateIntegrate>
                {
                    new RoadmapStateIntegrate { Id = 0, IdName = "Done", Name = "Done", Text = "Done", Description = null, IsIntegrate = true, IsDelete = false },
                    new RoadmapStateIntegrate { Id = 0, IdName = "In Progress", Name = "In Progress", Text = "In Progress", Description = null, IsIntegrate = true, IsDelete = false },
                    new RoadmapStateIntegrate { Id = 0, IdName = "New", Name = "New", Text = "New", Description = null, IsIntegrate = true, IsDelete = false },
                    new RoadmapStateIntegrate { Id = 0, IdName = "Open", Name = "Open", Text = "Open", Description = null, IsIntegrate = true, IsDelete = false },
                };
                return result;
            }
        }
    }

    public static class CmsComponentTypeIntegrateApp
    {
        public enum IdEnum { [IdEnum(null)]None = 0, [IdEnum("Page")]Page = -1, [IdEnum("Paragraph")]Paragraph = -2, [IdEnum("Bullet")]Bullet = -3, [IdEnum("Image")]Image = -4, [IdEnum("Youtube")]Youtube = -5, [IdEnum("CodeBlock")]CodeBlock = -6, [IdEnum("Glossary")]Glossary = -7 }

        public static CmsComponentTypeIntegrate Row(this IdEnum value)
        {
            return RowList.Where(item => item.IdName == IdEnumAttribute.IdNameFromEnum(value)).SingleOrDefault();
        }

        public static IdEnum IdName(string value)
        {
            return IdEnumAttribute.IdNameToEnum<IdEnum>(value);
        }

        public static string IdName(this IdEnum value)
        {
            return IdEnumAttribute.IdNameFromEnum(value);
        }

        public static async Task<int> Id(this IdEnum value)
        {
            return (await Data.Query<CmsComponentTypeIntegrate>().Where(item => item.IdName == IdEnumAttribute.IdNameFromEnum(value)).QueryExecuteAsync()).Single().Id;
        }

        public static List<CmsComponentTypeIntegrate> RowList
        {
            get
            {
                var result = new List<CmsComponentTypeIntegrate>
                {
                    new CmsComponentTypeIntegrate { Id = 0, Name = "Page", Sort = 1, IdName = "Page" },
                    new CmsComponentTypeIntegrate { Id = 0, Name = "Paragraph", Sort = 2, IdName = "Paragraph" },
                    new CmsComponentTypeIntegrate { Id = 0, Name = "Bullet", Sort = 3, IdName = "Bullet" },
                    new CmsComponentTypeIntegrate { Id = 0, Name = "Image", Sort = 4, IdName = "Image" },
                    new CmsComponentTypeIntegrate { Id = 0, Name = "Youtube", Sort = 5, IdName = "Youtube" },
                    new CmsComponentTypeIntegrate { Id = 0, Name = "CodeBlock", Sort = 6, IdName = "CodeBlock" },
                    new CmsComponentTypeIntegrate { Id = 0, Name = "Glossary", Sort = 7, IdName = "Glossary" },
                };
                return result;
            }
        }
    }
}

namespace DatabaseIntegrate.Doc
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.Linq;
    using System.Threading.Tasks;
    using Framework.DataAccessLayer;
    using Database.Doc;

    public static class LanguageIntegrateApp
    {
        public enum IdEnum { [IdEnum(null)]None = 0, [IdEnum("English")]English = -1, [IdEnum("German")]German = -2 }

        public static LanguageIntegrate Row(this IdEnum value)
        {
            return RowList.Where(item => item.IdName == IdEnumAttribute.IdNameFromEnum(value)).SingleOrDefault();
        }

        public static IdEnum IdName(string value)
        {
            return IdEnumAttribute.IdNameToEnum<IdEnum>(value);
        }

        public static string IdName(this IdEnum value)
        {
            return IdEnumAttribute.IdNameFromEnum(value);
        }

        public static async Task<int> Id(this IdEnum value)
        {
            return (await Data.Query<LanguageIntegrate>().Where(item => item.IdName == IdEnumAttribute.IdNameFromEnum(value)).QueryExecuteAsync()).Single().Id;
        }

        public static List<LanguageIntegrate> RowList
        {
            get
            {
                var result = new List<LanguageIntegrate>
                {
                    new LanguageIntegrate { Id = 0, Name = "English", TextHtml = "<span class=\"flag-icon flag-icon-gb\"></span> English", IdName = "English" },
                    new LanguageIntegrate { Id = 0, Name = "German", TextHtml = "<span class=\"flag-icon flag-icon-de\"></span> German", IdName = "German" },
                };
                return result;
            }
        }
    }

    public static class LoginUserIntegrateApp
    {
        public enum IdEnum { [IdEnum(null)]None = 0, [IdEnum("Guest")]Guest = -1 }

        public static LoginUserIntegrate Row(this IdEnum value)
        {
            return RowList.Where(item => item.IdName == IdEnumAttribute.IdNameFromEnum(value)).SingleOrDefault();
        }

        public static IdEnum IdName(string value)
        {
            return IdEnumAttribute.IdNameToEnum<IdEnum>(value);
        }

        public static string IdName(this IdEnum value)
        {
            return IdEnumAttribute.IdNameFromEnum(value);
        }

        public static async Task<int> Id(this IdEnum value)
        {
            return (await Data.Query<LoginUserIntegrate>().Where(item => item.IdName == IdEnumAttribute.IdNameFromEnum(value)).QueryExecuteAsync()).Single().Id;
        }

        public static List<LoginUserIntegrate> RowList
        {
            get
            {
                var result = new List<LoginUserIntegrate>
                {
                    new LoginUserIntegrate { Id = 0, Name = "Guest", Password = null, IsIntegrate = true, IsDelete = false, IdName = "Guest" },
                };
                return result;
            }
        }
    }

    public static class LoginRoleIntegrateApp
    {
        public enum IdEnum { [IdEnum(null)]None = 0, [IdEnum("Admin")]Admin = -1, [IdEnum("Developer")]Developer = -2, [IdEnum("Guest")]Guest = -3 }

        public static LoginRoleIntegrate Row(this IdEnum value)
        {
            return RowList.Where(item => item.IdName == IdEnumAttribute.IdNameFromEnum(value)).SingleOrDefault();
        }

        public static IdEnum IdName(string value)
        {
            return IdEnumAttribute.IdNameToEnum<IdEnum>(value);
        }

        public static string IdName(this IdEnum value)
        {
            return IdEnumAttribute.IdNameFromEnum(value);
        }

        public static async Task<int> Id(this IdEnum value)
        {
            return (await Data.Query<LoginRoleIntegrate>().Where(item => item.IdName == IdEnumAttribute.IdNameFromEnum(value)).QueryExecuteAsync()).Single().Id;
        }

        public static List<LoginRoleIntegrate> RowList
        {
            get
            {
                var result = new List<LoginRoleIntegrate>
                {
                    new LoginRoleIntegrate { Id = 0, Name = "Admin", Sort = null, IdName = "Admin" },
                    new LoginRoleIntegrate { Id = 0, Name = "Developer", Sort = null, IdName = "Developer" },
                    new LoginRoleIntegrate { Id = 0, Name = "Guest", Sort = 3, IdName = "Guest" },
                };
                return result;
            }
        }
    }
}
